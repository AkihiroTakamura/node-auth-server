var User = require('../models/user');
var i18n = require('i18n');
var logger = require('../util/logger');
var errorHandler = require('../util/errorhandler');
var permission = require('../util/permission');

exports.get = function(req, res, next) {

  if (!req.user) return next(new errorHandler.UnAuthorizedException(i18n.__('dsp.notlogined')));

  var whereoption =  {username: req.user.username};

  User.findOne(
    whereoption
  )
  .populate('roles')
  .exec(function(err, user) {
      if (err) return next(new errorHandler.DatabaseQueryException(err));

      var json = {};

      if (permission.hasScope(req, 'username')) json.username = user.username;
      if (permission.hasScope(req, 'role')) {
        if (user.roles) {
          json.authorities = [];
          for (var i = 0; i < user.roles.length; i++) {
            json.authorities.push(user.roles[i].name);
          };
        }
      }
      if (permission.hasScope(req, 'fullName')) json.fullName = user.fullName;
      if (permission.hasScope(req, 'email')) json.email = user.email;
      if (permission.hasScope(req, 'phone')) json.phone = user.phone;
      if (permission.hasScope(req, 'image')) json.image = req.protocol + '://' + req.headers.host + '/profile/avator/' + user.username;

      res.json(json);
  });

}

exports.upload = function(req, res, next) {

  if (!req.user) return next(new errorHandler.UnAuthorizedException(i18n.__('dsp.notlogined')));

  var mimetype = req.file.mimetype;
  if (mimetype !== 'image/jpeg' && mimetype !== 'image/png')
    return next(new errorHandler.ParameterInvalidException(i18n.__('validate.invalid.imageFile')));

  var base64 = req.file.buffer.toString('base64');

  User.findById(req.user._id, 'username', function(err, user) {
    if (!user) return next(new errorHandler.ParameterInvalidException(res.__('validate.notfound.user')));

    user.image = base64;
    user.save(function(err) {
      if (err) return next(new errorHandler.DatabaseQueryException(err));

      res.json({
        message: res.__('dsp.success'),
        data: user
      });

    });

  });

}

exports.avator = function(req, res, next) {
  if (!req.user) return dummyAvator(res);

  var username = req.params.username;

  User.findOne({username: username}, function(err, user) {
    if (!user) return dummyAvator(res);
    if (!user.image) return dummyAvator(res);

    var avator = new Buffer(user.image, 'base64');

    res.writeHead(200, {
     'Content-Type': 'image/png',
     'Content-Length': avator.length
    });
    res.end(avator);
  });

}

function dummyAvator(res) {
  var avator = new Buffer(dummyAvatorBase64(), 'base64');

  res.writeHead(200, {
   'Content-Type': 'image/png',
   'Content-Length': avator.length
  });
  res.end(avator);
}

function dummyAvatorBase64() {
  return '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';
}
